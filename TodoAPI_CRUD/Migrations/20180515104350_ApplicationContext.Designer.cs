// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TodoAPI_CRUD.Models;

namespace TodoAPI_CRUD.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180515104350_ApplicationContext")]
    partial class ApplicationContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abonnements", b =>
                {
                    b.Property<long>("AbonnementsID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abonnement");

                    b.Property<long?>("ArticlesID");

                    b.Property<DateTime>("DateDebut");

                    b.Property<DateTime>("DateFin");

                    b.Property<long>("Prix_Abonnement");

                    b.Property<long>("pkAbonne");

                    b.HasKey("AbonnementsID");

                    b.HasIndex("ArticlesID");

                    b.ToTable("Abonnements");
                });

            modelBuilder.Entity("Articles", b =>
                {
                    b.Property<long>("ArticlesID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreation");

                    b.Property<DateTime>("DateDelete");

                    b.Property<DateTime>("DateModification");

                    b.Property<long>("FichierCentralID");

                    b.Property<string>("LoginCreation");

                    b.Property<string>("LoginDelete");

                    b.Property<string>("LoginModification");

                    b.Property<string>("PhraseAcroche");

                    b.Property<string>("TextArticle");

                    b.Property<string>("TitreArticle");

                    b.HasKey("ArticlesID");

                    b.HasIndex("FichierCentralID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("FichierCentral", b =>
                {
                    b.Property<long>("FichierCentralID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AbonnementsID");

                    b.Property<DateTime>("DateCreation");

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Nom");

                    b.Property<string>("Prenom");

                    b.Property<long>("ProfilsID");

                    b.Property<Guid>("UserId");

                    b.HasKey("FichierCentralID");

                    b.HasIndex("AbonnementsID")
                        .IsUnique();

                    b.HasIndex("ProfilsID");

                    b.ToTable("FichierCentral");
                });

            modelBuilder.Entity("IDV_NET5.Models.NotesEtCommentaires", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ArticleID");

                    b.Property<long?>("ArticlesID");

                    b.Property<string>("Commentaire");

                    b.Property<DateTime>("DateCreation");

                    b.Property<long?>("FichierCentralID");

                    b.Property<int>("Note");

                    b.Property<long>("NotesEtCommentairesID");

                    b.HasKey("Id");

                    b.HasIndex("ArticlesID");

                    b.HasIndex("FichierCentralID");

                    b.ToTable("NotesEtCommentaires");
                });

            modelBuilder.Entity("TodoAPI_CRUD.Models.CategoriesMedia", b =>
                {
                    b.Property<long>("CategoriesMediaID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ArticlesID");

                    b.Property<string>("TypeCategorieMedia");

                    b.HasKey("CategoriesMediaID");

                    b.HasIndex("ArticlesID");

                    b.ToTable("CategoriesMedia");
                });

            modelBuilder.Entity("TodoAPI_CRUD.Models.Images", b =>
                {
                    b.Property<long>("ImagesID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ArticleID");

                    b.Property<long?>("ArticlesID");

                    b.Property<long>("CategorieID");

                    b.Property<long?>("CategoriesMediaID");

                    b.Property<string>("NomImage");

                    b.Property<string>("URLImage");

                    b.HasKey("ImagesID");

                    b.HasIndex("ArticlesID");

                    b.HasIndex("CategoriesMediaID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TodoAPI_CRUD.Models.Profils", b =>
                {
                    b.Property<long>("ProfilsID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CodeProfil");

                    b.Property<string>("ProfilName");

                    b.HasKey("ProfilsID");

                    b.ToTable("Profils");
                });

            modelBuilder.Entity("TodoAPI_CRUD.Models.Videos", b =>
                {
                    b.Property<long>("VideosID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ArticlesID");

                    b.Property<long>("CategoriesMediaID");

                    b.Property<string>("URLVideo");

                    b.HasKey("VideosID");

                    b.HasIndex("ArticlesID");

                    b.HasIndex("CategoriesMediaID");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Abonnements", b =>
                {
                    b.HasOne("Articles")
                        .WithMany("Abonnements")
                        .HasForeignKey("ArticlesID");
                });

            modelBuilder.Entity("Articles", b =>
                {
                    b.HasOne("FichierCentral", "FichierCentral")
                        .WithMany()
                        .HasForeignKey("FichierCentralID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FichierCentral", b =>
                {
                    b.HasOne("Abonnements", "Abonnements")
                        .WithOne("FichierCentral")
                        .HasForeignKey("FichierCentral", "AbonnementsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TodoAPI_CRUD.Models.Profils", "profils")
                        .WithMany()
                        .HasForeignKey("ProfilsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDV_NET5.Models.NotesEtCommentaires", b =>
                {
                    b.HasOne("Articles", "Articles")
                        .WithMany()
                        .HasForeignKey("ArticlesID");

                    b.HasOne("FichierCentral", "FichierCentral")
                        .WithMany()
                        .HasForeignKey("FichierCentralID");
                });

            modelBuilder.Entity("TodoAPI_CRUD.Models.CategoriesMedia", b =>
                {
                    b.HasOne("Articles")
                        .WithMany("CategoriesMedia")
                        .HasForeignKey("ArticlesID");
                });

            modelBuilder.Entity("TodoAPI_CRUD.Models.Images", b =>
                {
                    b.HasOne("Articles", "Articles")
                        .WithMany()
                        .HasForeignKey("ArticlesID");

                    b.HasOne("TodoAPI_CRUD.Models.CategoriesMedia", "CategoriesMedia")
                        .WithMany("ListImage")
                        .HasForeignKey("CategoriesMediaID");
                });

            modelBuilder.Entity("TodoAPI_CRUD.Models.Videos", b =>
                {
                    b.HasOne("Articles", "Articles")
                        .WithMany()
                        .HasForeignKey("ArticlesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TodoAPI_CRUD.Models.CategoriesMedia", "CategoriesMedia")
                        .WithMany("ListVideo")
                        .HasForeignKey("CategoriesMediaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
